volumes:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  qdrant_storage:
  redis_storage:

networks:
  bridge:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['bridge']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
  links:
    - postgres

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  networks: ['bridge']
  restart: unless-stopped
  ports:
    - 11434:11434
  volumes:
    - ollama_storage:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  networks: ['bridge']
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  command:
    - "-c"
    - "sleep 3; OLLAMA_HOST=ollama:11434 ollama pull llama3.2"

services:
  postgres:
    image: postgres:16-alpine
    networks: ['bridge']
    restart: unless-stopped
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-restore:
    <<: *service-n8n
    container_name: n8n-restore
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      postgres:
        condition: service_healthy

  n8n-backup:
    <<: *service-n8n
    container_name: n8n-backup
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n export:credentials --backup --output=credentials/ && n8n export:workflow --backup --output=workflows/"
    volumes:
      - ./n8n/backup:/backup
      - ./n8n/backup/workflows:/home/node/workflows
      - ./n8n/backup/credentials:/home/node/credentials
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
      - ./n8n/backup/workflows:/home/node/workflows
      - ./n8n/backup/credentials:/home/node/credentials
    depends_on:
      postgres:
        condition: service_healthy
      n8n-restore:
        condition: service_completed_successfully
      n8n-backup:
        condition: service_completed_successfully

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    networks: ['bridge']
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage

  redis:
      image: redis:7-alpine
      container_name: redis
      networks: ['bridge']
      restart: unless-stopped
      #environment:
      #  - REDIS_HOST=${REDIS_HOST}
      #  - REDIS_PORT=${REDIS_PORT}
      #  - REDIS_PASSWORD=${REDIS_PASSWORD}
      env_file:
        - .env
      ports:
        - 6379:6379
      volumes:
        - redis_storage:/data
        - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
      command: ["redis-server", "/usr/local/etc/redis/redis.conf", "--requirepass", "$REDIS_PASSWORD"]

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu
